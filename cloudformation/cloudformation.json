{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "Environment": {
      "Description": "Environment to be deployed.",
      "Type": "String"
    },
    "WatchmenBucket": {
      "Description": "The Watchmen bucket",
      "Type": "String"
    },
    "WatchmenBuildsPrefix": {
      "Description": "The S3 prefix that contains the Watchmen builds.",
      "Type": "String"
    },
    "WatchmenLambdasZipFile": {
      "Description": "The zip file name of the Watchmen lambdas code.",
      "Type": "String"
    }
  },
  "Conditions": {
    "IsProd": {"Fn::Equals": [{"Ref": "Environment"}, "prod"]}
  },
  "Resources": {
    "WatchmenManhattanLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Runtime": "python2.7",
        "Code": {
          "S3Bucket": {"Ref" : "WatchmenBucket"},
          "S3Key": {
            "Fn::Join": [
              "/", [
                {
                  "Ref": "WatchmenBuildsPrefix"
                },
                {
                  "Ref": "WatchmenLambdasZipFile"
                }
              ]
            ]
          }
        },
        "Description": "Monitors hourly, daily, and weekly reaper feeds.",
        "Handler": "handler.start_manhattan_watcher",
        "MemorySize": 256,
        "Role": {
             "Fn::GetAtt": [
              "WatchmenLambdaExecutionRole",
              "Arn"
             ]
        },
        "Timeout": 30,
        "Tags": [
          {"Key": "Owner", "Value": "CyberIntel"},
          {"Key": "Product", "Value": "watchmen"},
          {"Key": "Protected", "Value": "TRUE"},
          {"Key": "Component", "Value": "lambda"},
          {"Key": "Name", "Value": "watchmen-manhattan"},
          {
            "Key": "Env",
            "Value": {
              "Fn::If": [
                "IsProd",
                "cyberint-prod",
                "cyberint-test"
              ]
            }
          }
        ]
      }
    },
    "WatchmenMolochLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Runtime": "python2.7",
        "Code": {
          "S3Bucket": {"Ref" : "WatchmenBucket"},
          "S3Key": {
            "Fn::Join": [
              "/", [
                {
                  "Ref": "WatchmenBuildsPrefix"
                },
                {
                  "Ref": "WatchmenLambdasZipFile"
                }
              ]
            ]
          }
        },
        "Description": "Monitors NOH/D Feed hourly.",
        "Handler": "handler.start_moloch_watcher",
        "MemorySize": 256,
        "Role": {
             "Fn::GetAtt": [
              "WatchmenLambdaExecutionRole",
              "Arn"
             ]
        },
        "Timeout": 30,
        "Tags": [
          {"Key": "Owner", "Value": "CyberIntel"},
          {"Key": "Product", "Value": "watchmen"},
          {"Key": "Protected", "Value": "TRUE"},
          {"Key": "Component", "Value": "lambda"},
          {"Key": "Name", "Value": "watchmen-moloch"},
          {
            "Key": "Env",
            "Value": {
              "Fn::If": [
                "IsProd",
                "cyberint-prod",
                "cyberint-test"
              ]
            }
          }
        ]
      }
    },
    "WatchmenOzymandiasLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Runtime": "python2.7",
        "Code": {
          "S3Bucket": {"Ref" : "WatchmenBucket"},
          "S3Key": {
            "Fn::Join": [
              "/", [
                {
                  "Ref": "WatchmenBuildsPrefix"
                },
                {
                  "Ref": "WatchmenLambdasZipFile"
                }
              ]
            ]
          }
        },
        "Description": "Monitors neustar data coming into S3.",
        "Handler": "handler.start_ozymandias_watcher",
        "MemorySize": 256,
        "Role": {
             "Fn::GetAtt": [
              "WatchmenLambdaExecutionRole",
              "Arn"
             ]
        },
        "Timeout": 30,
        "Tags": [
          {"Key": "Owner", "Value": "CyberIntel"},
          {"Key": "Product", "Value": "watchmen"},
          {"Key": "Protected", "Value": "TRUE"},
          {"Key": "Component", "Value": "lambda"},
          {"Key": "Name", "Value": "watchmen-ozymandias"},
          {
            "Key": "Env",
            "Value": {
              "Fn::If": [
                "IsProd",
                "cyberint-prod",
                "cyberint-test"
              ]
            }
          }
        ]
      }
    },
    "WatchmenRorschachLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Runtime": "python2.7",
        "Code": {
          "S3Bucket": {"Ref" : "WatchmenBucket"},
          "S3Key": {
            "Fn::Join": [
              "/", [
                {
                  "Ref": "WatchmenBuildsPrefix"
                },
                {
                  "Ref": "WatchmenLambdasZipFile"
                }
              ]
            ]
          }
        },
        "Description": "Monitors parquet data coming into S3 hourly.",
        "Environment": {
          "Variables": {
          "BUCKET_NAME": "bitaa",
          "ENVIRONMENT": "cyberint-prod",
          "PREFIX": "parquet/com.farsightsecurity.300021"
          }
        },
        "Handler": "handler.start_rorschach_watcher",
        "MemorySize": 256,
        "Role": {
             "Fn::GetAtt": [
              "WatchmenLambdaExecutionRole",
              "Arn"
             ]
        },
        "Timeout": 30,
        "Tags": [
          {"Key": "Owner", "Value": "CyberIntel"},
          {"Key": "Product", "Value": "watchmen"},
          {"Key": "Protected", "Value": "TRUE"},
          {"Key": "Component", "Value": "lambda"},
          {"Key": "Name", "Value": "watchmen-rorschach"},
          {
            "Key": "Env",
            "Value": {
              "Fn::If": [
                "IsProd",
                "cyberint-prod",
                "cyberint-test"
              ]
            }
          }
        ]
      }
    },
    "WatchmenSilhouetteLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Runtime": "python2.7",
        "Code": {
          "S3Bucket": {"Ref" : "WatchmenBucket"},
          "S3Key": {
            "Fn::Join": [
              "/", [
                {
                  "Ref": "WatchmenBuildsPrefix"
                },
                {
                  "Ref": "WatchmenLambdasZipFile"
                }
              ]
            ]
          }
        },
        "Description": "Monitors lookalike feed.",
        "Handler": "handler.start_silhouette_watcher",
        "MemorySize": 128,
        "Role": {
             "Fn::GetAtt": [
              "WatchmenLambdaExecutionRole",
              "Arn"
             ]
        },
        "Timeout": 7,
        "Tags": [
          {"Key": "Owner", "Value": "CyberIntel"},
          {"Key": "Product", "Value": "watchmen"},
          {"Key": "Protected", "Value": "TRUE"},
          {"Key": "Component", "Value": "lambda"},
          {"Key": "Name", "Value": "watchmen-silhouette"},
          {
            "Key": "Env",
            "Value": {
              "Fn::If": [
                "IsProd",
                "cyberint-prod",
                "cyberint-test"
              ]
            }
          }
        ]
      }
    },
    "WatchmenSpectreLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Runtime": "python2.7",
        "Code": {
          "S3Bucket": {"Ref" : "WatchmenBucket"},
          "S3Key": {
            "Fn::Join": [
              "/", [
                {
                  "Ref": "WatchmenBuildsPrefix"
                },
                {
                  "Ref": "WatchmenLambdasZipFile"
                }
              ]
            ]
          }
        },
        "Description": "Monitors Georgia Tech data coming into S3.",
        "Handler": "handler.start_spectre_watcher",
        "MemorySize": 256,
        "Role": {
             "Fn::GetAtt": [
              "WatchmenLambdaExecutionRole",
              "Arn"
             ]
        },
        "Timeout": 30,
        "Tags": [
          {"Key": "Owner", "Value": "CyberIntel"},
          {"Key": "Product", "Value": "watchmen"},
          {"Key": "Protected", "Value": "TRUE"},
          {"Key": "Component", "Value": "lambda"},
          {"Key": "Name", "Value": "watchmen-spectre"},
          {
            "Key": "Env",
            "Value": {
              "Fn::If": [
                "IsProd",
                "cyberint-prod",
                "cyberint-test"
              ]
            }
          }
        ]
      }
    },
    "ManhattanDailyScheduledEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "A daily event that kicks off ManhattanDailyWatchmen",
        "ScheduleExpression": "cron(0 15 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "ManhattanDailyScheduler",
            "Arn": {
              "Fn::GetAtt": ["WatchmenManhattanLambda", "Arn"]
            },
            "Input": "{\"type\": \"Daily\"}"
          }
        ]
      }
    },
    "ManhattanHourlyScheduledEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "A hourly event that kicks off ManhattanHourlyWatchmen",
        "ScheduleExpression": "cron(0 * * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "ManhattanHourlyScheduler",
            "Arn": {
              "Fn::GetAtt": ["WatchmenManhattanLambda", "Arn"]
            },
            "Input": "{\"type\": \"Hourly\"}"
          }
        ]
      }
    },
    "ManhattanWeeklyScheduledEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "A weekly event that kicks off ManhattanWeeklyWatchmen",
        "ScheduleExpression": "cron(0 15 ? * FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "ManhattanWeeklyScheduler",
            "Arn": {
              "Fn::GetAtt": ["WatchmenManhattanLambda", "Arn"]
            },
            "Input": "{\"type\": \"Weekly\"}"
          }
        ]
      }
    },
    "MolochScheduledEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "A hourly event that kicks off Moloch Watchman.",
        "ScheduleExpression": "cron(59 * * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "MolochScheduler",
            "Arn": {
              "Fn::GetAtt": ["WatchmenMolochLambda", "Arn"]
            }
          }
        ]
      }
    },
    "OzymandiasScheduledEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "A daily event that kicks off OzymandiasWatchmen",
        "ScheduleExpression": "cron(40 11 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "OzymandiasScheduler",
            "Arn": {
              "Fn::GetAtt": ["WatchmenOzymandiasLambda", "Arn"]
            }
          }
        ]
      }
    },
    "RorschachScheduledEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "A hourly event that kicks off Rorschach watchmen",
        "ScheduleExpression": "cron(0 * * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "RorschachScheduler",
            "Arn": {
              "Fn::GetAtt": ["WatchmenRorschachLambda", "Arn"]
            }
          }
        ]
      }
    },
    "SilhouetteScheduledEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "A daily event that kicks off Silhouette Watchman.",
        "ScheduleExpression": "cron(0 15 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "SilhouetteScheduler",
            "Arn": {
              "Fn::GetAtt": ["WatchmenSilhouetteLambda", "Arn"]
            }
          }
        ]
      }
    },
    "SpectreScheduledEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "A daily event that kicks off Spectre Watchman",
        "ScheduleExpression": "cron(0 16 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "SpectreScheduler",
            "Arn": {
              "Fn::GetAtt": ["WatchmenSpectreLambda", "Arn"]
            }
          }
        ]
      }
    },
    "InvokeManhattanDailyLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WatchmenManhattanLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ManhattanDailyScheduledEvent",
            "Arn"
          ]
        }
      }
    },
    "InvokeManhattanHourlyLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WatchmenManhattanLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ManhattanHourlyScheduledEvent",
            "Arn"
          ]
        }
      }
    },
    "InvokeManhattanWeeklyLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WatchmenManhattanLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ManhattanWeeklyScheduledEvent",
            "Arn"
          ]
        }
      }
    },
    "InvokeMolochLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WatchmenMolochLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "MolochScheduledEvent",
            "Arn"
          ]
        }
      }
    },
    "InvokeOzymandiasLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WatchmenOzymandiasLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "OzymandiasScheduledEvent",
            "Arn"
          ]
        }
      }
    },
    "InvokeRorschachLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WatchmenRorschachLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "RorschachScheduledEvent",
            "Arn"
          ]
        }
      }
    },
    "InvokeSilhouetteLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WatchmenSilhouetteLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SilhouetteScheduledEvent",
            "Arn"
          ]
        }
      }
    },
    "InvokeSpectreLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WatchmenSpectreLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SpectreScheduledEvent",
            "Arn"
          ]
        }
      }
    },
    "WatchmenLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "WatchmenLambdaExecutionRole",
              {
                "Ref": "Environment"
              }
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "",
                [
                  "WatchmenLambdaExecutionRole",
                  {
                    "Ref": "Environment"
                  }
                ]
              ]
            },
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:DescribeAlarmsForMetric",
                    "cloudwatch:PutMetricAlarm",
                    "dynamodb:Query",
                    "ecs:ListTasks",
                    "ecs:DescribeTasks",
                    "lambda:InvokeFunction",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "s3:Get*",
                    "s3:List*",
                    "SNS:Publish"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  }
}