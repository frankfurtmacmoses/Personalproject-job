AWSTemplateFormatVersion: 2010-09-09
Description: "Watchmen monitors the cyberintel aws account for issues and outages."
Mappings:
  EnvMap:
    test:
      Bucket: cyberintel-test
      BuildFile: watchmen-cyberintel-lambdas-test.zip
    prod:
      Bucket: cyber-intel-prod
      BuildFile: watchmen-cyberintel-lambdas-prod.zip
Parameters:
  Env:
    Description: Environment to be deployed.
    Type: String
  BuildsPrefix:
    Description: The S3 prefix that contains the Watchmen builds.
    Type: String
  Account:
    Description: AWS account to be deployed in (eg. cyberintel)
    Type: String
Conditions:
  IsProd: !Equals [ !Ref Env, prod ]
Resources:
  WatchmenRorschachLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Rorschach
      Runtime: python3.7
      Code:
        S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
        S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
      Description: Monitors s3 targets daily.
      Environment:
        Variables:
          ENVIRONMENT: !Ref Env
          ACCOUNT: !Ref Account
          TARGET_ACCOUNT: cyberintel   # This is necessary in order to find the correct targets file. Definitely hacky.
      Handler: watchmen.main_cyberintel.start_rorschach_watcher
      MemorySize: 256
      Role: !GetAtt RorschachCyberintelExecutionRole.Arn
      Timeout: 300
      Tags:
        - Key: Owner
          Value: CyberIntel
        - Key: Product
          Value: watchmen
        - Key: Protected
          Value: 'TRUE'
        - Key: Component
          Value: lambda
        - Key: Name
          Value: watchmen-rorschach
        - Key: Env
          Value: !Ref Env
  RorschachDailyScheduledEvent:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: A daily event that kicks off daily Rorschach Watchman
      ScheduleExpression: cron(0 18 * * ? *)
      State: !If [ IsProd, ENABLED, DISABLED ]
      Targets:
        - Id: RorschachDailyScheduler
          Arn: !GetAtt WatchmenRorschachLambda.Arn
          Input: '{"Type": "Daily"}'
  RorschachHourlyScheduledEvent:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: A hourly event that kicks off hourly Rorschach Watchman
      ScheduleExpression: cron(30 * * * ? *)
      State: !If [ IsProd, ENABLED, DISABLED ]
      Targets:
        - Id: RorschachHourlyScheduler
          Arn: !GetAtt WatchmenRorschachLambda.Arn
          Input: '{"Type": "Hourly"}'
  InvokeRorschachDailyLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt WatchmenRorschachLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RorschachDailyScheduledEvent.Arn
  InvokeRorschachHourlyLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt WatchmenRorschachLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RorschachHourlyScheduledEvent.Arn
  RorschachCyberintelExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub RorschachCyberintelExecutionRole-${Env}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub RorschachCyberintelExecutionRole-${Env}
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'SNS:Publish'
                Resource:
                    - !If [IsProd, "arn:aws:sns:us-east-1:488906355115:Ozone_COM_Data", "arn:aws:sns:us-east-1:488906355115:Watchmen_Test"]
                    - !If [IsProd, "arn:aws:sns:us-east-1:488906355115:zvelo_data_monitor", "arn:aws:sns:us-east-1:488906355115:Watchmen_Test"]
              - Effect: Allow
                Action:
                  - 's3:Get*'
                  - 's3:HeadBucket'
                  - 's3:List*'
                Resource:
                  - 'arn:aws:s3:::cyberintel-ozone'
                  - 'arn:aws:s3:::cyberintel-ozone/*'
                  - 'arn:aws:s3:::cyberintel-zvelo-feed'
                  - 'arn:aws:s3:::cyberintel-zvelo-feed/*'
