AWSTemplateFormatVersion: 2010-09-09
Description: "Watchmen monitors several data sources in the atg account for issues and outages."
Mappings:
  EnvMap:
    test:
      Bucket: cyber-intel-test
      BuildFile: watchmen-lambdas-test.zip
      VPC: vpc-28ee704e
      SubnetC: subnet-9c16fbb0
      SubnetD: subnet-870dd2cf
    prod:
      Bucket: cyber-intel
      BuildFile: watchmen-lambdas-prod.zip
      VPC: vpc-28ee704e
      SubnetC: subnet-9c16fbb0
      SubnetD: subnet-870dd2cf
Parameters:
  Env:
    Description: Environment to be deployed.
    Type: String
  BuildsPrefix:
    Description: The S3 prefix that contains the Watchmen builds.
    Type: String
  Account:
    Description: The aws account alias (eg. atg)
    Type: String
  KmsKeyId:
    Description: The AWS KMS key ID
    type: String
    Default: 336e1b0b-39da-44ad-b565-e6fe51a1b810
Conditions:
  IsProd: !Equals [ !Ref Env, prod ]
Resources:
    WatchmenBernardLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Bernard]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors EMR Clusters.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_bernard_watcher
        MemorySize: 256
        Role: !GetAtt WatchmenLambdaEmrExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-bernard
          - Key: Env
            Value: !Ref Env
    WatchmenComedianLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Comedian]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors the VirusTotal API quota.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_comedian_watcher
        MemorySize: 256
        Role: !GetAtt WatchmenLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-comedian
          - Key: Env
            Value: !Ref Env
    WatchmenCrookshanksLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Crookshanks]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors the Smartlisting feeds.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_crookshanks_watcher
        MemorySize: 256
        Role: !GetAtt WatchmenLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-crookshanks
          - Key: Env
            Value: !Ref Env
    WatchmenJupiterLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Jupiter]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors Cyber-Intel endpoints.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_jupiter_watcher
        MemorySize: 256
        Role: !GetAtt WatchmenLambdaExecutionRole.Arn
        Timeout: 300
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-jupiter
          - Key: Env
            Value: !Ref Env
        VpcConfig:
          SecurityGroupIds:
            - !GetAtt JupiterSecurityGroup.GroupId
          SubnetIds:
            - !FindInMap [EnvMap, !Ref Env, SubnetC]
            - !FindInMap [EnvMap, !Ref Env, SubnetD]
    WatchmenManhattanLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Manhattan]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors hourly, daily, and weekly reaper feeds.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_manhattan_watcher
        MemorySize: 256
        Role: !GetAtt WatchmenLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-manhattan
          - Key: Env
            Value: !Ref Env
    WatchmenMetropolisLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Metropolis]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors metrics and KPI change detection on S3.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_metropolis_watcher
        MemorySize: 256
        Role: !GetAtt WatchmenLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-metropolis
          - Key: Env
            Value: !Ref Env
    WatchmenMolochLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Moloch]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors NOH/D Feed hourly.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_moloch_watcher
        MemorySize: 256
        Role: !GetAtt MolochLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-moloch
          - Key: Env
            Value: !Ref Env
    WatchmenMothmanLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Mothman]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors files uploaded to the ForeverMail S3 folder.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_mothman_watcher
        MemorySize: 256
        Role: !GetAtt WatchmenLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-mothman
          - Key: Env
            Value: !Ref Env
    WatchmenRorschachLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Sub ${AWS::StackName}-Rorschach
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors s3 targets hourly and daily.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
            ACCOUNT: !Ref Account
        Handler: !Sub watchmen.main_${Account}.start_rorschach_watcher
        MemorySize: 256
        Role: !GetAtt RorschachExecutionRole.Arn
        Timeout: 300
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-rorschach
          - Key: Env
            Value: !Ref Env
    WatchmenSilhouetteLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Silhouette]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors lookalike feed.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_silhouette_watcher
        MemorySize: 128
        Role: !GetAtt WatchmenLambdaExecutionRole.Arn
        Timeout: 7
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-silhouette
          - Key: Env
            Value: !Ref Env
    WatchmenSpectreLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Spectre]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors Georgia Tech data coming into S3.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_spectre_watcher
        MemorySize: 256
        Role: !GetAtt WatchmenLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-spectre
          - Key: Env
            Value: !Ref Env
    BernardScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off the Bernard Watchman.
        ScheduleExpression: cron(0 14 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: BernardScheduler
            Arn: !GetAtt WatchmenBernardLambda.Arn
    ComedianScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off Comedian Watchman.
        ScheduleExpression: cron(0 15 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: ComedianScheduler
            Arn: !GetAtt WatchmenComedianLambda.Arn
    CrookshanksScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A weekly event that kicks off Crookshanks Watchman.
        ScheduleExpression: cron(0 10 ? * MON *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: CrookshanksScheduler
            Arn: !GetAtt WatchmenCrookshanksLambda.Arn
    JupiterScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A hourly event that kicks off the Jupiter Watchman
        ScheduleExpression: cron(0 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: JupiterScheduler
            Arn: !GetAtt WatchmenJupiterLambda.Arn
            Input: '{"Type": "Hourly"}'
    ManhattanDailyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off daily Manhattan Watchman
        ScheduleExpression: cron(0 15 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: ManhattanDailyScheduler
            Arn: !GetAtt WatchmenManhattanLambda.Arn
            Input: '{"Type": "Daily"}'
    ManhattanHourlyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A hourly event that kicks off hourly Manhattan Watchman
        ScheduleExpression: cron(0 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: ManhattanHourlyScheduler
            Arn: !GetAtt WatchmenManhattanLambda.Arn
            Input: '{"Type": "Hourly"}'
    ManhattanWeeklyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A weekly event that kicks off weekly Manhattan Watchman
        ScheduleExpression: cron(0 15 ? * FRI *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: ManhattanWeeklyScheduler
            Arn: !GetAtt WatchmenManhattanLambda.Arn
            Input: '{"Type": "Weekly"}'
    MetropolisScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off Metropolis Watchman
        ScheduleExpression: cron(0 14 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: MetropolisScheduler
            Arn: !GetAtt WatchmenMetropolisLambda.Arn
            Input: '{"Type": "Daily"}'
    MolochScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A hourly event that kicks off Moloch Watchman.
        ScheduleExpression: cron(59 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: MolochScheduler
            Arn: !GetAtt WatchmenMolochLambda.Arn
    MothmanScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: An event that kicks off Mothman Watchman every 10 minutes.
        ScheduleExpression: cron(0/10 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: MothmanScheduler
            Arn: !GetAtt WatchmenMothmanLambda.Arn
    RorschachDailyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off the Rorschach Watchman
        ScheduleExpression: cron(0 15 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: RorschachDailyScheduler
            Arn: !GetAtt WatchmenRorschachLambda.Arn
            Input: '{"Type": "Daily"}'
    RorschachHourlyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A hourly event that kicks off the Rorschach Watchman
        ScheduleExpression: cron(0 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: RorschachHourlyScheduler
            Arn: !GetAtt WatchmenRorschachLambda.Arn
            Input: '{"Type": "Hourly"}'
    SilhouetteScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off Silhouette Watchman.
        ScheduleExpression: cron(0 15 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: SilhouetteScheduler
            Arn: !GetAtt WatchmenSilhouetteLambda.Arn
    SpectreScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off Spectre Watchman
        ScheduleExpression: cron(0 16 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: SpectreScheduler
            Arn: !GetAtt WatchmenSpectreLambda.Arn
    InvokeBernardLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenBernardLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt BernardScheduledEvent.Arn
    InvokeComedianLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenComedianLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt ComedianScheduledEvent.Arn
    InvokeCrookshanksLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenCrookshanksLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt CrookshanksScheduledEvent.Arn
    InvokeJupiterLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenJupiterLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt JupiterScheduledEvent.Arn
    InvokeManhattanDailyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenManhattanLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt ManhattanDailyScheduledEvent.Arn
    InvokeManhattanHourlyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenManhattanLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt ManhattanHourlyScheduledEvent.Arn
    InvokeManhattanWeeklyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenManhattanLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt ManhattanWeeklyScheduledEvent.Arn
    InvokeMetropolisLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenMetropolisLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt MetropolisScheduledEvent.Arn
    InvokeMolochLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenMolochLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt MolochScheduledEvent.Arn
    InvokeMothmanLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenMothmanLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt MothmanScheduledEvent.Arn
    InvokeRorschachHourlyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenRorschachLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt RorschachHourlyScheduledEvent.Arn
    InvokeRorschachDailyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenRorschachLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt RorschachDailyScheduledEvent.Arn
    InvokeSilhouetteLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenSilhouetteLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt SilhouetteScheduledEvent.Arn
    InvokeSpectreLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenSpectreLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt SpectreScheduledEvent.Arn

    MolochLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub MolochLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: !Sub MolochLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'kms:Decrypt'
                  Resource: !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:HeadBucket'
                    - 's3:ListBucket'
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:s3:::deteque-new-observable-data/NewlyObservedDomains/*'
                    - !Sub 'arn:${AWS::Partition}:s3:::deteque-new-observable-data/NewlyObservedHostname/*'
                - Effect: Allow
                  Action:
                    - 'SNS:Publish'
                  Resource: !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:cyberintel-feeds-prod'

    RorschachExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub RorschachExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: !Sub RorschachExecutionRole-${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource:
                    - "arn:aws:kms:us-east-1:405093580753:key/336e1b0b-39da-44ad-b565-e6fe51a1b810"
                - Effect: Allow
                  Action:
                    - 'SNS:Publish'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:HeadBucket'
                    - 's3:ListBucket'
                  Resource:
                    - 'arn:aws:s3:::bitaa'
                    - 'arn:aws:s3:::bitaa/parquet/com.farsightsecurity.300021/*'
                    - 'arn:aws:s3:::cyber-intel'
                    - 'arn:aws:s3:::cyber-intel/*'

    WatchmenLambdaEmrExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Join ['-', [WatchmenLambdaEmrExecutionRole, !Ref Env]]
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: !Join ['', [WatchmenLambdaEmrExecutionRole, !Ref Env]]
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "elasticmapreduce:Describe*"
                    - "elasticmapreduce:ListSteps"
                  Resource:
                    - "arn:aws:elasticmapreduce:us-east-1:405093580753:cluster/*"
                - Effect: Allow
                  Action:
                    - "elasticmapreduce:ListClusters"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - 'lambda:InvokeFunction'
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:DescribeLogStreams'
                    - 'logs:PutLogEvents'
                    - 'SNS:Publish'
                  Resource: '*'
                - Effect: Allow
                  Action:
                   - "kms:Decrypt"
                  Resource:
                  - "arn:aws:kms:us-east-1:405093580753:key/336e1b0b-39da-44ad-b565-e6fe51a1b810"
                - Effect: Allow
                  Action:
                    - 's3:Get*'
                    - 's3:List*'
                  Resource:
                    - !Sub
                      - 'arn:aws:s3:::${s3_bucket}/watchmen/bernard/*'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }
                - Effect: Allow
                  Action:
                    - 's3:GetAccountPublicAccessBlock'
                    - 's3:ListAllMyBuckets'
                    - 's3:HeadBucket'
                  Resource: '*'
    
    WatchmenLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Join ['-', [WatchmenLambdaExecutionRole, !Ref Env]]
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: !Join ['', [WatchmenLambdaExecutionRole, !Ref Env]]
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'cloudwatch:DescribeAlarmsForMetric'
                    - 'cloudwatch:PutMetricAlarm'
                    - 'dynamodb:Query'
                    - 'ecs:ListTasks'
                    - 'ecs:DescribeTasks'
                    - 'lambda:InvokeFunction'
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:DescribeLogStreams'
                    - 'logs:PutLogEvents'
                    - 'SNS:Publish'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource:
                    - "arn:aws:kms:us-east-1:405093580753:key/336e1b0b-39da-44ad-b565-e6fe51a1b810"
                - Effect: Allow
                  Action:
                    - 's3:Get*'
                    - 's3:List*'
                    - 's3:PutObject'
                    - 's3:DeleteObject'
                  Resource:
                    - 'arn:aws:s3:::bitaa'
                    - 'arn:aws:s3:::cyber-intel'
                    - 'arn:aws:s3:::cyber-intel-test'
                    - 'arn:aws:s3:::cyber-intel/*'
                    - 'arn:aws:s3:::cyber-intel-test/*'
                    - 'arn:aws:s3:::bitaa/*'
                    - 'arn:aws:s3:::deteque-new-observable-data'
                    - 'arn:aws:s3:::deteque-new-observable-data/*'
                - Effect: Allow
                  Action:
                    - 's3:GetAccountPublicAccessBlock'
                    - 's3:ListAllMyBuckets'
                    - 's3:HeadBucket'
                  Resource: '*'

    JupiterSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group that allows connections to cyber-intel services
        GroupName: !Join ['-', [!Ref "AWS::StackName", JupiterSecurityGroup]]
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: -1
            ToPort: -1
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-jupiter
          - Key: Env
            Value: !Ref Env
        VpcId: !FindInMap [EnvMap, !Ref Env, VPC]
