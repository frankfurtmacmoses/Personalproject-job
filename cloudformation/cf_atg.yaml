AWSTemplateFormatVersion: 2010-09-09
Description: "Watchmen monitors several data sources in the atg account for issues and outages."
Mappings:
  EnvMap:
    test:
      Bucket: cyber-intel-test
      BuildFile: watchmen-lambdas-test.zip
      VPC: vpc-28ee704e
      SubnetC: subnet-9c16fbb0
      SubnetD: subnet-870dd2cf
    prod:
      Bucket: cyber-intel
      BuildFile: watchmen-lambdas-prod.zip
      VPC: vpc-28ee704e
      SubnetC: subnet-9c16fbb0
      SubnetD: subnet-870dd2cf
Parameters:
  Env:
    Description: Environment to be deployed.
    Type: String
  BuildsPrefix:
    Description: The S3 prefix that contains the Watchmen builds.
    Type: String
  Account:
    Description: The aws account alias (eg. atg)
    Type: String
  KmsKeyId:
    Description: The AWS KMS key ID
    Type: String
    Default: 336e1b0b-39da-44ad-b565-e6fe51a1b810
Conditions:
  IsProd: !Equals [ !Ref Env, prod ]
Resources:

    SnsTopicStack:
      Type: 'AWS::CloudFormation::Stack'
      Properties:
        Parameters:
          Env: !Ref Env
        TemplateURL: !Sub
          - 'https://s3.amazonaws.com/${s3_bucket}/watchmen/cloudformation/sns_atg.yaml'
          - s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket']

    WatchmenBernardLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Bernard]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors EMR Clusters.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_bernard_watcher
        MemorySize: 256
        Role: !GetAtt BernardLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-bernard
          - Key: Env
            Value: !Ref Env
    WatchmenComedianLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Comedian]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors the VirusTotal API quota.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_comedian_watcher
        MemorySize: 256
        Role: !GetAtt ComedianLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-comedian
          - Key: Env
            Value: !Ref Env
    WatchmenJupiterLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Jupiter]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors Cyber-Intel endpoints.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_jupiter_watcher
        MemorySize: 256
        Role: !GetAtt JupiterLambdaExecutionRole.Arn
        Timeout: 300
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-jupiter
          - Key: Env
            Value: !Ref Env
        VpcConfig:
          SecurityGroupIds:
            - !GetAtt JupiterSecurityGroup.GroupId
          SubnetIds:
            - !FindInMap [EnvMap, !Ref Env, SubnetC]
            - !FindInMap [EnvMap, !Ref Env, SubnetD]
    WatchmenManhattanLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Manhattan]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors hourly, daily, and weekly reaper feeds.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_manhattan_watcher
        MemorySize: 256
        Role: !GetAtt ManhattanLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-manhattan
          - Key: Env
            Value: !Ref Env
    WatchmenMetropolisLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Metropolis]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors metrics and KPI change detection on S3.
        Environment:
          Variables:
            SNS_DOMAINCOUNTSMETRICS: !If [IsProd, !GetAtt SnsTopicStack.Outputs.DomainCountsMetrics, !Ref 'AWS::NoValue']
            SNS_WATCHMENTEST: !If [IsProd, !Ref 'AWS::NoValue', !GetAtt SnsTopicStack.Outputs.WatchmenTest]
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_metropolis_watcher
        MemorySize: 256
        Role: !GetAtt MetropolisLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-metropolis
          - Key: Env
            Value: !Ref Env
    WatchmenMolochLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Moloch]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors NOH/D Feed hourly.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_moloch_watcher
        MemorySize: 256
        Role: !GetAtt MolochLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-moloch
          - Key: Env
            Value: !Ref Env
    WatchmenMothmanLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Mothman]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors files uploaded to the ForeverMail S3 folder.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_mothman_watcher
        MemorySize: 256
        Role: !GetAtt MothmanLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-mothman
          - Key: Env
            Value: !Ref Env
    WatchmenRorschachLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Sub ${AWS::StackName}-Rorschach
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors s3 targets hourly and daily.
        Environment:
          Variables:
            SNS_DSSUMMARIES: !If [IsProd, !GetAtt SnsTopicStack.Outputs.DSSummaries, !Ref 'AWS::NoValue']
            SNS_DOMAINCOUNTSMETRICS: !If [IsProd, !GetAtt SnsTopicStack.Outputs.DomainCountsMetrics, !Ref 'AWS::NoValue']
            SNS_GEORGIATECHPDNS: !If [IsProd, !GetAtt SnsTopicStack.Outputs.GeorgiaTechpDNS, !Ref 'AWS::NoValue']
            SNS_GENERICS3ATG: !If [IsProd, !GetAtt SnsTopicStack.Outputs.GenericS3Atg, !Ref 'AWS::NoValue']
            SNS_SMARTLISTINGS3: !If [IsProd, !GetAtt SnsTopicStack.Outputs.SmartListingS3, !Ref 'AWS::NoValue']
            SNS_WATCHMENTEST: !If [IsProd, !Ref 'AWS::NoValue', !GetAtt SnsTopicStack.Outputs.WatchmenTest]
            ENVIRONMENT: !Ref Env
            ACCOUNT: !Ref Account
            TARGET_ACCOUNT: atg   # This is necessary in order to find the correct targets file. Definitely hacky.
        Handler: !Sub watchmen.main_${Account}.start_rorschach_watcher
        MemorySize: 256
        Role: !GetAtt RorschachExecutionRole.Arn
        Timeout: 300
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-rorschach
          - Key: Env
            Value: !Ref Env
    WatchmenSilhouetteLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Silhouette]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors lookalike feed.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
        Handler: !Sub watchmen.main_${Account}.start_silhouette_watcher
        MemorySize: 128
        Role: !GetAtt SilhouetteLambdaExecutionRole.Arn
        Timeout: 7
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-silhouette
          - Key: Env
            Value: !Ref Env
    BernardScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off the Bernard Watchman.
        ScheduleExpression: cron(0 14 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: BernardScheduler
            Arn: !GetAtt WatchmenBernardLambda.Arn
    ComedianScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off Comedian Watchman.
        ScheduleExpression: cron(0 15 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: ComedianScheduler
            Arn: !GetAtt WatchmenComedianLambda.Arn
    JupiterScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A hourly event that kicks off the Jupiter Watchman
        ScheduleExpression: cron(0 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: JupiterScheduler
            Arn: !GetAtt WatchmenJupiterLambda.Arn
            Input: '{"Type": "Hourly"}'
    ManhattanDailyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off daily Manhattan Watchman
        ScheduleExpression: cron(0 15 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: ManhattanDailyScheduler
            Arn: !GetAtt WatchmenManhattanLambda.Arn
            Input: '{"Type": "Daily"}'
    ManhattanHourlyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A hourly event that kicks off hourly Manhattan Watchman
        ScheduleExpression: cron(0 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: ManhattanHourlyScheduler
            Arn: !GetAtt WatchmenManhattanLambda.Arn
            Input: '{"Type": "Hourly"}'
    ManhattanWeeklyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A weekly event that kicks off weekly Manhattan Watchman
        ScheduleExpression: cron(0 15 ? * FRI *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: ManhattanWeeklyScheduler
            Arn: !GetAtt WatchmenManhattanLambda.Arn
            Input: '{"Type": "Weekly"}'
    MetropolisScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off Metropolis Watchman
        ScheduleExpression: cron(0 14 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: MetropolisScheduler
            Arn: !GetAtt WatchmenMetropolisLambda.Arn
            Input: '{"Type": "Daily"}'
    MolochScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A hourly event that kicks off Moloch Watchman.
        ScheduleExpression: cron(59 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: MolochScheduler
            Arn: !GetAtt WatchmenMolochLambda.Arn
    MothmanScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: An event that kicks off Mothman Watchman every 10 minutes.
        ScheduleExpression: cron(0/10 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: MothmanScheduler
            Arn: !GetAtt WatchmenMothmanLambda.Arn
    RorschachDailyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off the Rorschach Watchman
        ScheduleExpression: cron(0 15 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: RorschachDailyScheduler
            Arn: !GetAtt WatchmenRorschachLambda.Arn
            Input: '{"Type": "Daily"}'
    RorschachHourlyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A hourly event that kicks off the Rorschach Watchman
        ScheduleExpression: cron(0 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: RorschachHourlyScheduler
            Arn: !GetAtt WatchmenRorschachLambda.Arn
            Input: '{"Type": "Hourly"}'
    RorschachWeeklyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A weekly event that kicks off the Rorschach Watchman
        ScheduleExpression: cron(45 10 ? * MON *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: RorschachWeeklyScheduler
            Arn: !GetAtt WatchmenRorschachLambda.Arn
            Input: '{"Type": "Weekly"}'
    SilhouetteScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off Silhouette Watchman.
        ScheduleExpression: cron(0 17 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: SilhouetteScheduler
            Arn: !GetAtt WatchmenSilhouetteLambda.Arn
    InvokeBernardLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenBernardLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt BernardScheduledEvent.Arn
    InvokeComedianLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenComedianLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt ComedianScheduledEvent.Arn
    InvokeJupiterLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenJupiterLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt JupiterScheduledEvent.Arn
    InvokeManhattanDailyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenManhattanLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt ManhattanDailyScheduledEvent.Arn
    InvokeManhattanHourlyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenManhattanLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt ManhattanHourlyScheduledEvent.Arn
    InvokeManhattanWeeklyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenManhattanLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt ManhattanWeeklyScheduledEvent.Arn
    InvokeMetropolisLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenMetropolisLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt MetropolisScheduledEvent.Arn
    InvokeMolochLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenMolochLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt MolochScheduledEvent.Arn
    InvokeMothmanLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenMothmanLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt MothmanScheduledEvent.Arn
    InvokeRorschachHourlyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenRorschachLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt RorschachHourlyScheduledEvent.Arn
    InvokeRorschachDailyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenRorschachLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt RorschachDailyScheduledEvent.Arn
    InvokeRorschachWeeklyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenRorschachLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt RorschachWeeklyScheduledEvent.Arn
    InvokeSilhouetteLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenSilhouetteLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt SilhouetteScheduledEvent.Arn

    BernardLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub BernardLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
           - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: !Sub BernardLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:HeadBucket'
                    - 's3:ListBucket'
                  Resource:
                    - !Sub
                      - 'arn:${AWS::Partition}:s3:::${s3_bucket}/watchmen/bernard/*'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource: !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
                - Effect: Allow
                  Action:
                    - "elasticmapreduce:DescribeCluster"
                    - "elasticmapreduce:DescribeSteps"
                    - "elasticmapreduce:ListSteps"
                  Resource: !Sub "arn:${AWS::Partition}:elasticmapreduce:${AWS::Region}:${AWS::AccountId}:cluster/*"
                - Effect: Allow
                  Action:
                    - "elasticmapreduce:ListClusters"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - 'SNS:Publish'
                  Resource:
                    - !Sub
                      - 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${Topic}'
                      - {Topic: !If [IsProd, EMR_Clusters, Watchmen_Test] }

    ComedianLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub ComedianLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: !Sub ComedianLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource: !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}"
                - Effect: Allow
                  Action:
                    - 'SNS:Publish'
                  Resource:
                    Fn::If:
                      - IsProd
                      - - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:VirusTotal_Quota_Email"
                        - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:VirusTotal_Quota_Pager"
                        - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:DomainTools_Quota_Email"
                        - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:DomainTools_Quota_Pager"
                        - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:Generic_Quota_Email"
                      - !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:Watchmen_Test'

    JupiterLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub JupiterLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: !Sub JupiterLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource: !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
                - Effect: Allow
                  Action:
                    - 's3:ListBucket'
                  Resource:
                    - !Sub
                      - 'arn:${AWS::Partition}:s3:::${s3_bucket}'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:PutObject'
                    - 's3:DeleteObject'
                  Resource:
                    - !Sub
                      - 'arn:${AWS::Partition}:s3:::${s3_bucket}/watchmen/jupiter/*'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }
                - Effect: Allow
                  Action:
                    - 'SNS:Publish'
                  Resource:
                    - !Sub
                      - 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${Topic}'
                      - {Topic: !If [IsProd, Sockeye, Watchmen_Test] }

    ManhattanLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub ManhattanLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: !Sub ManhattanLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:DescribeLogStreams'
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:feed-eaters-prod:*'
                - Effect: Allow
                  Action:
                    - 'dynamodb:Query'
                  Resource:
                    - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CyberInt-Reaper-prod-DynamoDbStack-3XBEIHSJPHBT-ReaperMetricsTable-1LHW3I46AEDQJ"
                - Effect: Allow
                  Action:
                    - 'ecs:ListTasks'
                    - 'ecs:DescribeTasks'
                  Resource: "*"
                  Condition:
                    ArnEquals:
                      ecs:cluster:
                         - !Sub "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/cyberint-feed-eaters-prod-EcsCluster-L94N32MQ0KU8"
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource:
                    - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}"
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                  Resource:
                    - !Sub
                      - 'arn:aws:s3:::${s3_bucket}/watchmen/manhattan/feeds_to_check.json'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }
                - Effect: Allow
                  Action:
                    - 'SNS:Publish'
                  Resource:
                    Fn::If:
                      - IsProd
                      - - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:cyberintel-feeds-prod"
                        - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:PagerDuty"
                      - !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:Watchmen_Test'

    MetropolisLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub MetropolisLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: !Sub MetropolisLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource:  !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:HeadBucket'
                    - 's3:ListBucket'
                  Resource: !Sub 'arn:${AWS::Partition}:s3:::cyber-intel/analytics/change_detection/prod/*'
                - Effect: Allow
                  Action:
                    - 'SNS:Publish'
                  Resource:
                    - !If [IsProd, !GetAtt SnsTopicStack.Outputs.DomainCountsMetrics, !Ref 'AWS::NoValue']
                    - !If [IsProd, !Ref 'AWS::NoValue', !GetAtt SnsTopicStack.Outputs.WatchmenTest]
                    - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:Slowdrip_Metrics"
                    - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:Reaper_Metrics"
                    - !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:Metrics_and_KPI'

    MolochLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub MolochLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: !Sub MolochLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'kms:Decrypt'
                  Resource: !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:HeadBucket'
                    - 's3:ListBucket'
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:s3:::deteque-new-observable-data/NewlyObservedDomains/*'
                    - !Sub 'arn:${AWS::Partition}:s3:::deteque-new-observable-data/NewlyObservedHostname/*'
                - Effect: Allow
                  Action:
                    - 'SNS:Publish'
                  Resource:
                    - !Sub
                      - 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${Topic}'
                      - {Topic: !If [IsProd, cyberintel-feeds-prod, Watchmen_Test] }

    MothmanLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub MothmanLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: !Sub MothmanLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource: !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
                - Effect: Allow
                  Action:
                    -  's3:ListBucket'
                  Resource: !Sub 'arn:${AWS::Partition}:s3:::cyber-intel'
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:HeadBucket'
                  Resource: !Sub 'arn:${AWS::Partition}:s3:::cyber-intel/malspam/forevermail/*'
                - Effect: Allow
                  Action:
                    - 'SNS:Publish'
                  Resource:
                    - !Sub
                      - "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${Topic}"
                      - { Topic: !If [IsProd, cyberintel-malspam-prod, Watchman_Test] }

    RorschachExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub RorschachExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: !Sub RorschachExecutionRole-${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource:
                    - "arn:aws:kms:us-east-1:405093580753:key/336e1b0b-39da-44ad-b565-e6fe51a1b810"
                - Effect: Allow
                  Action:
                    - 'SNS:Publish'
                  Resource:
                    - !If [IsProd, !GetAtt SnsTopicStack.Outputs.DSSummaries, !Ref 'AWS::NoValue']
                    - !If [IsProd, !GetAtt SnsTopicStack.Outputs.DomainCountsMetrics, !Ref 'AWS::NoValue']
                    - !If [IsProd, !GetAtt SnsTopicStack.Outputs.GeorgiaTechpDNS, !Ref 'AWS::NoValue']
                    - !If [IsProd, !GetAtt SnsTopicStack.Outputs.GenericS3Atg, !Ref 'AWS::NoValue']
                    - !If [IsProd, !GetAtt SnsTopicStack.Outputs.SmartListingS3, !Ref 'AWS::NoValue']
                    - !If [IsProd, !Ref 'AWS::NoValue', !GetAtt SnsTopicStack.Outputs.WatchmenTest]
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:HeadBucket'
                    - 's3:ListBucket'
                  Resource:
                    - 'arn:aws:s3:::bitaa'
                    - 'arn:aws:s3:::bitaa/parquet/com.farsightsecurity.300021/*'
                    - 'arn:aws:s3:::cyber-intel'
                    - 'arn:aws:s3:::cyber-intel/*'
                    - !Sub
                      - 'arn:aws:s3:::${s3_bucket}'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }
                    - !Sub
                      - 'arn:aws:s3:::${s3_bucket}/watchmen/cloudformation'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }

    SilhouetteLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub SilhouetteLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: !Sub SilhouetteLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource: !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                  Resource: !Sub 'arn:${AWS::Partition}:s3:::cyber-intel/analytics/lookalike2/prod/status/*'
                - Effect: Allow
                  Action:
                    - 'SNS:Publish'
                  Resource:
                    - !Sub
                      - "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${Topic}"
                      - {Topic: !If [IsProd, cyberintel-lookalike-s3, Watchmen_Test]}

    WatchmenLambdaEmrExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Join ['-', [WatchmenLambdaEmrExecutionRole, !Ref Env]]
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: !Join ['', [WatchmenLambdaEmrExecutionRole, !Ref Env]]
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "elasticmapreduce:Describe*"
                    - "elasticmapreduce:ListSteps"
                  Resource:
                    - "arn:aws:elasticmapreduce:us-east-1:405093580753:cluster/*"
                - Effect: Allow
                  Action:
                    - "elasticmapreduce:ListClusters"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - 'lambda:InvokeFunction'
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:DescribeLogStreams'
                    - 'logs:PutLogEvents'
                    - 'SNS:Publish'
                  Resource: '*'
                - Effect: Allow
                  Action:
                   - "kms:Decrypt"
                  Resource:
                  - "arn:aws:kms:us-east-1:405093580753:key/336e1b0b-39da-44ad-b565-e6fe51a1b810"
                - Effect: Allow
                  Action:
                    - 's3:Get*'
                    - 's3:List*'
                  Resource:
                    - !Sub
                      - 'arn:aws:s3:::${s3_bucket}/watchmen/bernard/*'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }
                - Effect: Allow
                  Action:
                    - 's3:GetAccountPublicAccessBlock'
                    - 's3:ListAllMyBuckets'
                    - 's3:HeadBucket'
                  Resource: '*'

    WatchmenLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Join ['-', [WatchmenLambdaExecutionRole, !Ref Env]]
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: !Join ['', [WatchmenLambdaExecutionRole, !Ref Env]]
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'cloudwatch:DescribeAlarmsForMetric'
                    - 'cloudwatch:PutMetricAlarm'
                    - 'dynamodb:Query'
                    - 'ecs:ListTasks'
                    - 'ecs:DescribeTasks'
                    - 'lambda:InvokeFunction'
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:DescribeLogStreams'
                    - 'logs:PutLogEvents'
                    - 'SNS:Publish'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource:
                    - "arn:aws:kms:us-east-1:405093580753:key/336e1b0b-39da-44ad-b565-e6fe51a1b810"
                - Effect: Allow
                  Action:
                    - 's3:Get*'
                    - 's3:List*'
                    - 's3:PutObject'
                    - 's3:DeleteObject'
                  Resource:
                    - 'arn:aws:s3:::bitaa'
                    - 'arn:aws:s3:::cyber-intel'
                    - 'arn:aws:s3:::cyber-intel-test'
                    - 'arn:aws:s3:::cyber-intel/*'
                    - 'arn:aws:s3:::cyber-intel-test/*'
                    - 'arn:aws:s3:::bitaa/*'
                    - 'arn:aws:s3:::deteque-new-observable-data'
                    - 'arn:aws:s3:::deteque-new-observable-data/*'
                - Effect: Allow
                  Action:
                    - 's3:GetAccountPublicAccessBlock'
                    - 's3:ListAllMyBuckets'
                    - 's3:HeadBucket'
                  Resource: '*'

    JupiterSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group that allows connections to cyber-intel services
        GroupName: !Join ['-', [!Ref "AWS::StackName", JupiterSecurityGroup]]
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: -1
            ToPort: -1
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-jupiter
          - Key: Env
            Value: !Ref Env
        VpcId: !FindInMap [EnvMap, !Ref Env, VPC]
