AWSTemplateFormatVersion: 2010-09-09
Description: "Watchmen monitors several data sources in the atg account for issues and outages."
Mappings:
  EnvMap:
    test:
      Bucket: cyber-intel-test
      BuildFile: watchmen-lambdas-test.zip
      VPC: vpc-28ee704e
      SubnetC: subnet-9c16fbb0
      SubnetD: subnet-870dd2cf
    prod:
      Bucket: cyber-intel
      BuildFile: watchmen-lambdas-prod.zip
      VPC: vpc-28ee704e
      SubnetC: subnet-9c16fbb0
      SubnetD: subnet-870dd2cf
Parameters:
  Env:
    Description: Environment to be deployed.
    Type: String
  BuildsPrefix:
    Description: The S3 prefix that contains the Watchmen builds.
    Type: String
  Account:
    Description: The aws account alias (eg. atg)
    Type: String
  KmsKeyId:
    Description: The AWS KMS key ID
    Type: String
    Default: 336e1b0b-39da-44ad-b565-e6fe51a1b810
  SNSPrefix:
    Description: SNS Topic name prefix
    Type: String
    Default: Watchmen_
Conditions:
  IsProd: !Equals [ !Ref Env, prod ]
Resources:

    SnsTopicStack:
      Type: 'AWS::CloudFormation::Stack'
      Properties:
        Parameters:
          Env: !Ref Env
          SNSPrefix: !Ref SNSPrefix
        TemplateURL: !Sub
          - 'https://s3.amazonaws.com/${s3_bucket}/watchmen/cloudformation/sns_atg.yaml'
          - s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket']

    WatchmenBernardLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Bernard]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors EMR Clusters.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
            SNS_EMRCLUSTERSTATUS: !If [IsProd, !GetAtt SnsTopicStack.Outputs.EMRClusterStatus, !Ref 'AWS::NoValue']
            SNS_WATCHMENTEST: !If [IsProd, !Ref 'AWS::NoValue', !GetAtt SnsTopicStack.Outputs.WatchmenTest]
        Handler: !Sub watchmen.main_${Account}.start_bernard_watcher
        MemorySize: 256
        Role: !GetAtt BernardLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-bernard
          - Key: Env
            Value: !Ref Env
    WatchmenComedianLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Comedian]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors the VirusTotal API quota.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
            SNS_DOMAINTOOLSQUOTA: !If [IsProd, !GetAtt SnsTopicStack.Outputs.DomainToolsQuota, !Ref 'AWS::NoValue']
            SNS_DOMAINTOOLSQUOTAPAGER: !If [IsProd, !GetAtt SnsTopicStack.Outputs.DomainToolsQuotaPager, !Ref 'AWS::NoValue']
            SNS_GENERICQUOTA: !If [IsProd, !GetAtt SnsTopicStack.Outputs.GenericQuota, !Ref 'AWS::NoValue']
            SNS_VIRUSTOTALQUOTA: !If [IsProd, !GetAtt SnsTopicStack.Outputs.VirusTotalQuota, !Ref 'AWS::NoValue']
            SNS_VIRUSTOTALQUOTAPAGER: !If [IsProd, !GetAtt SnsTopicStack.Outputs.VirusTotalQuotaPager, !Ref 'AWS::NoValue']
            SNS_WATCHMENTEST: !If [IsProd, !Ref 'AWS::NoValue', !GetAtt SnsTopicStack.Outputs.WatchmenTest]
        Handler: !Sub watchmen.main_${Account}.start_comedian_watcher
        MemorySize: 256
        Role: !GetAtt ComedianLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-comedian
          - Key: Env
            Value: !Ref Env
    WatchmenJupiterLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Jupiter]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors Cyber-Intel endpoints.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
            SNS_SOCKEYE: !If [IsProd, !GetAtt SnsTopicStack.Outputs.Sockeye, !Ref 'AWS::NoValue']
            SNS_WATCHMENTEST: !If [IsProd, !Ref 'AWS::NoValue', !GetAtt SnsTopicStack.Outputs.WatchmenTest]
        Handler: !Sub watchmen.main_${Account}.start_jupiter_watcher
        MemorySize: 256
        Role: !GetAtt JupiterLambdaExecutionRole.Arn
        Timeout: 300
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-jupiter
          - Key: Env
            Value: !Ref Env
        VpcConfig:
          SecurityGroupIds:
            - !GetAtt JupiterSecurityGroup.GroupId
          SubnetIds:
            - !FindInMap [EnvMap, !Ref Env, SubnetC]
            - !FindInMap [EnvMap, !Ref Env, SubnetD]
    WatchmenManhattanLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Manhattan]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors hourly, daily, and weekly reaper feeds.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
            SNS_REAPERFEEDS: !If [IsProd, !GetAtt SnsTopicStack.Outputs.ReaperFeeds, !Ref 'AWS::NoValue']
            SNS_REAPERFEEDSPAGER: !If [IsProd, !GetAtt SnsTopicStack.Outputs.ReaperFeedsPager, !Ref 'AWS::NoValue']
            SNS_WATCHMENTEST: !If [IsProd, !Ref 'AWS::NoValue', !GetAtt SnsTopicStack.Outputs.WatchmenTest]
        Handler: !Sub watchmen.main_${Account}.start_manhattan_watcher
        MemorySize: 256
        Role: !GetAtt ManhattanLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-manhattan
          - Key: Env
            Value: !Ref Env
    WatchmenMothmanLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Mothman]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors files uploaded from Malspam MTA.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
            SNS_FOREVERMAIL: !If [IsProd, !GetAtt SnsTopicStack.Outputs.ForeverMail, !Ref 'AWS::NoValue']
            SNS_WATCHMENTEST: !If [IsProd, !Ref 'AWS::NoValue', !GetAtt SnsTopicStack.Outputs.WatchmenTest]
        Handler: !Sub watchmen.main_${Account}.start_mothman_watcher
        MemorySize: 256
        Role: !GetAtt MothmanLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-mothman
          - Key: Env
            Value: !Ref Env
    WatchmenNiteowlLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Niteowl]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors Github repositories for changes.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
            SNS_MITRECTI: !If [IsProd, !GetAtt SnsTopicStack.Outputs.MitreCti, !Ref 'AWS::NoValue']
            SNS_GENERICGITHUBATG: !If [IsProd, !GetAtt SnsTopicStack.Outputs.GenericGithubAtg, !Ref 'AWS::NoValue']
            SNS_WATCHMENTEST: !If [IsProd, !Ref 'AWS::NoValue', !GetAtt SnsTopicStack.Outputs.WatchmenTest]
        Handler: !Sub watchmen.main_${Account}.start_niteowl_watcher
        MemorySize: 256
        Role: !GetAtt NiteowlLambdaExecutionRole.Arn
        Timeout: 30
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-niteowl
          - Key: Env
            Value: !Ref Env
    WatchmenRorschachLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Sub ${AWS::StackName}-Rorschach
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors s3 targets hourly and daily.
        Environment:
          Variables:
            SNS_GENERICS3ATG: !If [IsProd, !GetAtt SnsTopicStack.Outputs.GenericS3Atg, !Ref 'AWS::NoValue']
            SNS_FEDPHISHS3: !If [ IsProd, !GetAtt SnsTopicStack.Outputs.FedPhish, !Ref 'AWS::NoValue' ]
            SNS_MAXMINDS3: !If [ IsProd, !GetAtt SnsTopicStack.Outputs.Maxmind, !Ref 'AWS::NoValue' ]
            SNS_MSISACS3: !If [ IsProd, !GetAtt SnsTopicStack.Outputs.Msisac, !Ref 'AWS::NoValue' ]
            SNS_PSLS3: !If [IsProd, !GetAtt SnsTopicStack.Outputs.PslS3, !Ref 'AWS::NoValue']
            SNS_THREATWAVES3: !If [IsProd, !GetAtt SnsTopicStack.Outputs.ThreatWaveS3, !Ref 'AWS::NoValue']
            SNS_WATCHMENTEST: !If [IsProd, !Ref 'AWS::NoValue', !GetAtt SnsTopicStack.Outputs.WatchmenTest]
            ENVIRONMENT: !Ref Env
            ACCOUNT: !Ref Account
            TARGET_ACCOUNT: atg   # This is necessary in order to find the correct targets file. Definitely hacky.
        Handler: !Sub watchmen.main_${Account}.start_rorschach_watcher
        MemorySize: 256
        Role: !GetAtt RorschachExecutionRole.Arn
        Timeout: 300
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-rorschach
          - Key: Env
            Value: !Ref Env
    WatchmenSilhouetteLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: !Join ["-", [ !Ref "AWS::StackName", Silhouette]]
        Runtime: python3.7
        Code:
          S3Bucket: !FindInMap [EnvMap, !Ref Env, Bucket]
          S3Key: !Join ["/", [!Ref BuildsPrefix, !FindInMap [EnvMap, !Ref Env, BuildFile]]]
        Description: Monitors lookalike feed.
        Environment:
          Variables:
            ENVIRONMENT: !Ref Env
            SNS_LOOKALIKE2ALGORITHMS3: !If [IsProd, !GetAtt SnsTopicStack.Outputs.Lookalike2AlgorithmS3, !Ref 'AWS::NoValue']
            SNS_WATCHMENTEST: !If [IsProd, !Ref 'AWS::NoValue', !GetAtt SnsTopicStack.Outputs.WatchmenTest]
        Handler: !Sub watchmen.main_${Account}.start_silhouette_watcher
        MemorySize: 128
        Role: !GetAtt SilhouetteLambdaExecutionRole.Arn
        Timeout: 7
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-silhouette
          - Key: Env
            Value: !Ref Env
    BernardScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off the Bernard Watchman.
        ScheduleExpression: cron(0 14 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: BernardScheduler
            Arn: !GetAtt WatchmenBernardLambda.Arn
    ComedianScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off Comedian Watchman.
        ScheduleExpression: cron(0 15 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: ComedianScheduler
            Arn: !GetAtt WatchmenComedianLambda.Arn
    JupiterScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A hourly event that kicks off the Jupiter Watchman
        ScheduleExpression: cron(0 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: JupiterScheduler
            Arn: !GetAtt WatchmenJupiterLambda.Arn
            Input: '{"Type": "Hourly"}'
    ManhattanDailyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off daily Manhattan Watchman
        ScheduleExpression: cron(0 15 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: ManhattanDailyScheduler
            Arn: !GetAtt WatchmenManhattanLambda.Arn
            Input: '{"Type": "Daily"}'
    ManhattanHourlyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A hourly event that kicks off hourly Manhattan Watchman
        ScheduleExpression: cron(0 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: ManhattanHourlyScheduler
            Arn: !GetAtt WatchmenManhattanLambda.Arn
            Input: '{"Type": "Hourly"}'
    ManhattanWeeklyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A weekly event that kicks off weekly Manhattan Watchman
        ScheduleExpression: cron(0 15 ? * FRI *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: ManhattanWeeklyScheduler
            Arn: !GetAtt WatchmenManhattanLambda.Arn
            Input: '{"Type": "Weekly"}'
    MothmanScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: An event that kicks off Mothman Watchman every 10 minutes.
        ScheduleExpression: cron(0/10 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: MothmanScheduler
            Arn: !GetAtt WatchmenMothmanLambda.Arn
    NiteowlDailyScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A Daily event that kicks off the Niteowl Watchman
        ScheduleExpression: cron(0 14 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: NiteowlDailyScheduler
            Arn: !GetAtt WatchmenNiteowlLambda.Arn
            Input: '{"Type": "Daily"}'
    RorschachMinutelyScheduledEvent10:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A Miutely event that kicks off the Rorschach Watchman every 10 minutes
        ScheduleExpression: cron(0/10 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: RorschachMinuteyScheduler10
            Arn: !GetAtt WatchmenRorschachLambda.Arn
            Input: '{"Type": {"Minutely": "00"}}'
    RorschachHourlyScheduledEvent59:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: An Hourly event that kicks off the Rorschach Watchman at HH:59
        ScheduleExpression: cron(59 * * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: RorschachHourlyScheduler59
            Arn: !GetAtt WatchmenRorschachLambda.Arn
            Input: '{"Type": {"Hourly": "59"}}'
    RorschachWeeklyScheduledEvent1030:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A Weekly event that kicks off the Rorschach Watchman at 10:30 AM every Monday
        ScheduleExpression: cron(30 10 ? * MON *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: RorschachWeeklyScheduler1030
            Arn: !GetAtt WatchmenRorschachLambda.Arn
            Input: '{"Type": {"Weekly": "Mon,10:30"}}'
    RorschachWeeklyScheduledEvent0800:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A Weekly event that kicks off the Rorschach Watchman at 08:00 AM every Tuesday
        ScheduleExpression: cron(00 08 ? * TUE *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: RorschachWeeklyScheduler0800
            Arn: !GetAtt WatchmenRorschachLambda.Arn
            Input: '{"Type": {"Weekly": "Tue,08:00"}}'
    RorschachWeeklyScheduledEvent0000:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A Weekly event that kicks off the Rorschach Watchman at 5:00PM PST (00:00 UTC) every Wednesday
        ScheduleExpression: cron(00 00 ? * WED *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: RorschachWeeklyScheduler0000
            Arn: !GetAtt WatchmenRorschachLambda.Arn
            Input: '{"Type": {"Weekly": "Wed,00:00"}}'
    SilhouetteScheduledEvent:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: A daily event that kicks off Silhouette Watchman.
        ScheduleExpression: cron(0 17 * * ? *)
        State: !If [ IsProd, ENABLED, DISABLED ]
        Targets:
          - Id: SilhouetteScheduler
            Arn: !GetAtt WatchmenSilhouetteLambda.Arn
    InvokeBernardLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenBernardLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt BernardScheduledEvent.Arn
    InvokeComedianLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenComedianLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt ComedianScheduledEvent.Arn
    InvokeJupiterLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenJupiterLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt JupiterScheduledEvent.Arn
    InvokeManhattanDailyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenManhattanLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt ManhattanDailyScheduledEvent.Arn
    InvokeManhattanHourlyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenManhattanLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt ManhattanHourlyScheduledEvent.Arn
    InvokeManhattanWeeklyLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenManhattanLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt ManhattanWeeklyScheduledEvent.Arn
    InvokeMothmanLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenMothmanLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt MothmanScheduledEvent.Arn
    InvokeNiteowlLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenNiteowlLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt NiteowlDailyScheduledEvent.Arn
    InvokeRorschachMinutelyLambdaPermission10:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenRorschachLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt RorschachMinutelyScheduledEvent10.Arn
    InvokeRorschachHourlyLambdaPermission59:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenRorschachLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt RorschachHourlyScheduledEvent59.Arn
    InvokeRorschachWeeklyLambdaPermission1030:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenRorschachLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt RorschachWeeklyScheduledEvent1030.Arn
    InvokeRorschachWeeklyLambdaPermission0800:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenRorschachLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt RorschachWeeklyScheduledEvent0800.Arn
    InvokeRorschachWeeklyLambdaPermission0000:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenRorschachLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt RorschachWeeklyScheduledEvent0000.Arn
    InvokeSilhouetteLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt WatchmenSilhouetteLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt SilhouetteScheduledEvent.Arn

    # Permissions used by all Watchmen
    WatchmenPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'SNS:Publish'
              Resource:
                - !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${SNSPrefix}*'
            - Effect: Allow
              Action:
                - 's3:PutObject'
              Resource:
                - !Sub
                  - 'arn:${AWS::Partition}:s3:::${s3_bucket}/watchmen/results/*'
                  - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }

    BernardLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub BernardLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
           - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
           - !Ref WatchmenPolicy
        Policies:
          - PolicyName: !Sub BernardLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:HeadBucket'
                    - 's3:ListBucket'
                  Resource:
                    - !Sub
                      - 'arn:${AWS::Partition}:s3:::${s3_bucket}/watchmen/bernard/*'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource: !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
                - Effect: Allow
                  Action:
                    - "elasticmapreduce:DescribeCluster"
                    - "elasticmapreduce:DescribeSteps"
                    - "elasticmapreduce:ListSteps"
                  Resource: !Sub "arn:${AWS::Partition}:elasticmapreduce:${AWS::Region}:${AWS::AccountId}:cluster/*"
                - Effect: Allow
                  Action:
                    - "elasticmapreduce:ListClusters"
                  Resource:
                    - "*"

    ComedianLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub ComedianLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - !Ref WatchmenPolicy
        Policies:
          - PolicyName: !Sub ComedianLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource: !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}"

    JupiterLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub JupiterLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - !Ref WatchmenPolicy
        Policies:
          - PolicyName: !Sub JupiterLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource: !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
                - Effect: Allow
                  Action:
                    - 's3:ListBucket'
                  Resource:
                    - !Sub
                      - 'arn:${AWS::Partition}:s3:::${s3_bucket}'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:PutObject'
                    - 's3:DeleteObject'
                  Resource:
                    - !Sub
                      - 'arn:${AWS::Partition}:s3:::${s3_bucket}/watchmen/jupiter/*'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }

    ManhattanLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub ManhattanLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - !Ref WatchmenPolicy
        Policies:
          - PolicyName: !Sub ManhattanLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:DescribeLogStreams'
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:feed-eaters-prod:*'
                - Effect: Allow
                  Action:
                    - 'dynamodb:Query'
                  Resource:
                    - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CyberInt-Reaper-prod-DynamoDbStack-3XBEIHSJPHBT-ReaperMetricsTable-1LHW3I46AEDQJ"
                - Effect: Allow
                  Action:
                    - 'ecs:ListTasks'
                    - 'ecs:DescribeTasks'
                  Resource: "*"
                  Condition:
                    ArnEquals:
                      ecs:cluster:
                         - !Sub "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/cyberint-feed-eaters-prod-EcsCluster-L94N32MQ0KU8"
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource:
                    - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}"
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                  Resource:
                    - !Sub
                      - 'arn:aws:s3:::${s3_bucket}/watchmen/manhattan/feeds_to_check.json'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }

    MothmanLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub MothmanLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - !Ref WatchmenPolicy
        Policies:
          - PolicyName: !Sub MothmanLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource: !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
                - Effect: Allow
                  Action:
                    -  's3:ListBucket'
                  Resource: !Sub 'arn:${AWS::Partition}:s3:::cyber-intel'
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:HeadBucket'
                  Resource: !Sub 'arn:${AWS::Partition}:s3:::cyber-intel/malspam/forevermail/*'

    NiteowlLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub NiteowlLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - !Ref WatchmenPolicy
        Policies:
          - PolicyName: !Sub NiteowlLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource: !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}"

    RorschachExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub RorschachExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - !Ref WatchmenPolicy
        Policies:
          - PolicyName: !Sub RorschachExecutionRole-${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource:
                    - "arn:aws:kms:us-east-1:405093580753:key/336e1b0b-39da-44ad-b565-e6fe51a1b810"
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:HeadBucket'
                    - 's3:ListBucket'
                  Resource:
                    - 'arn:aws:s3:::cyber-intel'
                    - 'arn:aws:s3:::cyber-intel/*'
                    - 'arn:aws:s3:::cyber-intel-threatwave'
                    - 'arn:aws:s3:::cyber-intel-threatwave/*'
                    - !Sub
                      - 'arn:aws:s3:::${s3_bucket}'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }
                    - !Sub
                      - 'arn:aws:s3:::${s3_bucket}/watchmen/cloudformation'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }

    SilhouetteLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub SilhouetteLambdaExecutionRole-${Env}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - !Ref WatchmenPolicy
        Policies:
          - PolicyName: !Sub SilhouetteLambdaExecutionRole${Env}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource: !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                  Resource: !Sub 'arn:${AWS::Partition}:s3:::cyber-intel/analytics/lookalike2/prod/status/*'

    WatchmenLambdaEmrExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Join ['-', [WatchmenLambdaEmrExecutionRole, !Ref Env]]
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: !Join ['', [WatchmenLambdaEmrExecutionRole, !Ref Env]]
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "elasticmapreduce:Describe*"
                    - "elasticmapreduce:ListSteps"
                  Resource:
                    - "arn:aws:elasticmapreduce:us-east-1:405093580753:cluster/*"
                - Effect: Allow
                  Action:
                    - "elasticmapreduce:ListClusters"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - 'lambda:InvokeFunction'
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:DescribeLogStreams'
                    - 'logs:PutLogEvents'
                    - 'SNS:Publish'
                  Resource: '*'
                - Effect: Allow
                  Action:
                   - "kms:Decrypt"
                  Resource:
                  - "arn:aws:kms:us-east-1:405093580753:key/336e1b0b-39da-44ad-b565-e6fe51a1b810"
                - Effect: Allow
                  Action:
                    - 's3:Get*'
                    - 's3:List*'
                  Resource:
                    - !Sub
                      - 'arn:aws:s3:::${s3_bucket}/watchmen/bernard/*'
                      - { s3_bucket: !FindInMap [EnvMap, !Ref 'Env', 'Bucket'] }
                - Effect: Allow
                  Action:
                    - 's3:GetAccountPublicAccessBlock'
                    - 's3:ListAllMyBuckets'
                    - 's3:HeadBucket'
                  Resource: '*'

    JupiterSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group that allows connections to cyber-intel services
        GroupName: !Join ['-', [!Ref "AWS::StackName", JupiterSecurityGroup]]
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: -1
            ToPort: -1
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Owner
            Value: CyberIntel
          - Key: Product
            Value: watchmen
          - Key: Protected
            Value: 'TRUE'
          - Key: Component
            Value: lambda
          - Key: Name
            Value: watchmen-jupiter
          - Key: Env
            Value: !Ref Env
        VpcId: !FindInMap [EnvMap, !Ref Env, VPC]
